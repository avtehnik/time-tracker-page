name: Test and deploy

# Cache setup: https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md
# Multi push: https://github.com/docker/build-push-action/blob/master/docs/advanced/push-multi-registries.md

on:
  push:
    branches: ['*']

env:
  IMAGE_NAME: "time-tracker"

jobs:
  checks-hadolint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    container: hadolint/hadolint:latest-debian
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check hadolint
        run: |
          hadolint --ignore DL3002 Dockerfile

  vars:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      app_release: ${{ steps.vars.outputs.app_release }}
      ref_slug: ${{ steps.vars.outputs.ref_slug }}
      github_image: ghcr.io/avtehnik/${{ env.IMAGE_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set vars
        id: vars
        run: |
          REF_SLUG="$(echo "${{ github.ref }}" | cut -d'/' -f3- | sed 's/[^a-z0-9_-]/__/gi')"
          if [ "${{ github.ref }}" = 'refs/heads/master' ]; then
            git_show=$(git show -s --format=%ci "${{ github.sha }}")
            APP_RELEASE="$(echo "$git_show" | sed 's/^\([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\).*/\1/')-${{ github.run_number }}"
          else
            APP_RELEASE="${REF_SLUG}-${{ github.run_number }}"
          fi

          echo "APP_RELEASE=$APP_RELEASE"
          echo "REF_SLUG=$REF_SLUG"
          echo "::set-output name=app_release::$APP_RELEASE"
          echo "::set-output name=ref_slug::$REF_SLUG"

  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [vars, checks-hadolint]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ needs.vars.outputs.github_image }}
          tags: |
            type=raw,value=${{ needs.vars.outputs.app_release }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache


  create-release:
    if:
      contains('
      refs/heads/master
      refs/heads/iac
      ', github.ref)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [vars, build-and-push-image]
    steps:
      - name: Create release
        run: |
          curl -fsS \
            -X POST \
            -H 'acccept: application/vnd.github.v3+json' \
            -H 'authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -H 'content-type: application/json' \
            "$GITHUB_API_URL/repos/${{ github.repository }}/git/refs" \
            -d '{"ref":"refs/tags/${{ needs.vars.outputs.app_release }}","sha":"${{ github.sha }}"}'
